/*! For license information please see site.js.LICENSE.txt */
var Hofstra;(()=>{var __webpack_modules__={"./node_modules/@tannerhodges/match-height/docs/match-height.js":module=>{eval('!function(t,e){ true?module.exports=e():0}(self,(function(){return(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{default:()=>h});function n(t){for(var e="",n=0;n<t;n+=1)e+="-";return e}function r(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return Array.prototype.slice.call(e.querySelectorAll(t))}function o(t){return"string"==typeof t?r(t):t instanceof Element?[t]:t?Array.prototype.slice.call(t):[]}function a(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(){var e,n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),e=this.reset.bind(this),"loading"!==document.readyState?e():document.addEventListener("DOMContentLoaded",e),window.addEventListener("resize",(function(){return n.update()})),this.groupCounter=1}var e,u;return e=t,(u=[{key:"findElements",value:function(){this.groups=this.group(r("[data-match-height]"))}},{key:"group",value:function(t){return t.reduce((function(t,e){var n=e.getAttribute("data-match-height"),r=e.closest("[data-match-height-group]");return r&&(n=r.getAttribute("data-match-height-group")+"-"+n),t[n]=(t[n]||[]).concat(e),t}),{})}},{key:"isEnabled",value:function(t){if(!t||!t[0])return!1;var e=t[0],n=e.closest("[data-match-height-enable]");if(n){var r=n.getAttribute("data-match-height-enable");return"true"===r||"false"!==r&&window.matchMedia(r).matches}var o=e.closest("[data-match-height-disable]");if(o){var a=o.getAttribute("data-match-height-disable");return"true"!==a&&("false"===a||!window.matchMedia(a).matches)}return!0}},{key:"match",value:function(t){var e=t.reduce((function(t,e){return e.style.height="",Math.max(t,e.offsetHeight)}),0);t.forEach((function(t){return t.style.height="".concat(e,"px")}))}},{key:"update",value:function(t){var e=this.getGroups(t);for(var n in e){var r=e[n];this.isEnabled(r)?this.match(r):r.forEach((function(t){return t.style.height=""}))}}},{key:"reset",value:function(){this.findElements(),this.update()}},{key:"getNewGroupID",value:function(){var t="group-".concat(this.groupCounter);return this.groupCounter+=1,t}},{key:"getGroupID",value:function(t){var e=(t=o(t)).shift();if(!e)return null;var n=e.getAttribute("data-match-height"),r=e.closest("[data-match-height-group]");return r&&(n=r.getAttribute("data-match-height-group")+"-"+n),n}},{key:"getGroups",value:function(t){return t?("string"==typeof t&&this.groups[t]?e=t:(t=o(t),e=this.getGroupID(t)),this.groups[e]?(n={},r=e,a=this.groups[e],r in n?Object.defineProperty(n,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[r]=a,n):{}):this.groups;var e,n,r,a}},{key:"getControl",value:function(t){var e=(t=o(t)).shift();return e?e.closest("[data-match-height-enable], [data-match-height-disable]"):null}},{key:"add",value:function(t,e){t=o(t),e=e||this.getNewGroupID(),t.forEach((function(t){return t.setAttribute("data-match-height",e)})),this.groups[e]=(this.groups[e]||[]).concat(t),this.update(e)}},{key:"remove",value:function(t){if("string"==typeof t&&this.groups[t])delete this.groups[t];else{var e,n=this,r=o(t),a=[];r.forEach((function(t){var e=n.getGroupID(t);t.removeAttribute("data-match-height"),n.groups[e]=n.groups[e].filter((function(e){return e&&e!==t})),n.groups[e].length?a.push(e):(delete n.groups[e],a=a.filter((function(t){return t!==e})))})),(e=a,e.filter((function(t,e,n){return n.indexOf(t)===e}))).forEach((function(t){return n.update(t)}))}}},{key:"debug",value:function(t){var e,r=this.getGroups(t);if(e=r,0!==Object.getOwnPropertyNames(e).length){for(var o in r)if(a(r,o)){var i=r[o],u=this.getControl(i),c={};c.isEnabled=this.isEnabled(i),c.control=u,c.enable=u?u.getAttribute("data-match-height-enable"):void 0,c.disable=u?u.getAttribute("data-match-height-disable"):void 0,c.groupID=o,c.group=i,console.log("\\n---------------------------".concat(n(o.length),\'-\\n🐛 Match Height Debugger: "\').concat(o,\'"\\n---------------------------\').concat(n(o.length),"-\\n\\n👇 Click into the object below to inspect your elements.\\n\\n")),console.log(c),console.log("\\n")}}else console.log("\\n😢 Oh no! Match Height couldn\'t find a matching group for \\"".concat(t,"\\".\\n\\n--------------------------------------------------------------------------------------------\\nℹ️ NOTE: Make sure the elements you\'re trying to debug have a [data-match-height] attribute.\\n--------------------------------------------------------------------------------------------\\n\\n"))}}])&&i(e.prototype,u),t}();!function(t){var e=t.Element.prototype;"function"!=typeof e.matches&&(e.matches=e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||function(t){for(var e=this,n=(e.document||e.ownerDocument).querySelectorAll(t),r=0;n[r]&&n[r]!==e;)++r;return Boolean(n[r])}),"function"!=typeof e.closest&&(e.closest=function(t){for(var e=this;e&&1===e.nodeType;){if(e.matches(t))return e;e=e.parentNode}return null})}(window);var c=new u;window.MatchHeight=c,"undefined"!=typeof $&&($.fn.matchHeight=function(){window.MatchHeight.add(this)});const h=c;return e.default})()}));\n//# sourceMappingURL=match-height.js.map\n\n//# sourceURL=webpack://Hofstra/./node_modules/@tannerhodges/match-height/docs/match-height.js?')},"./src/js/main.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  FadeImages: () => (/* reexport */ classes_FadeImages),\n  Header: () => (/* reexport */ classes_Header),\n  MatchHeight: () => (/* reexport */ (match_height_default())),\n  NavAnchor: () => (/* reexport */ classes_NavAnchor),\n  NavSidebar: () => (/* reexport */ classes_NavSidebar),\n  PowerSlider: () => (/* reexport */ classes_PowerSlider),\n  ScrollingText: () => (/* reexport */ classes_ScrollingText)\n});\n\n;// ./src/js/classes/FadeImages.js\nclass FadeImages {\n    constructor(element, options) {\n        this.element = element;\n        this.options = Object.assign({}, FadeImages.DEFAULTS, this.element.dataset, options);\n\n        this.desktopImages = this.element.querySelectorAll('.desktop-image');\n        this.mobileImages = this.element.querySelectorAll('.mobile-image');\n\n        this.currentDesktop = 0;\n        this.currentMobile = 0;\n\n        this.init();\n    }\n\n    init() {\n        if (this.desktopImages.length > 1) {\n            this.desktopInterval = setInterval(() => this.cycleImages(this.desktopImages, 'desktop'), this.options.interval);\n        }\n\n        if (this.mobileImages.length > 1) {\n            this.mobileInterval = setInterval(() => this.cycleImages(this.mobileImages, 'mobile'), this.options.interval);\n        }\n    }\n\n    cycleImages(images, type) {\n        const currentIndex = type === 'desktop' ? this.currentDesktop : this.currentMobile;\n\n        images[currentIndex]?.classList.remove('active');\n\n        const nextIndex = (currentIndex + 1) % images.length;\n        \n        images[nextIndex]?.classList.add('active');\n\n        if (type === 'desktop') {\n            this.currentDesktop = nextIndex;\n        } else {\n            this.currentMobile = nextIndex;\n        }\n    }\n}\n\nFadeImages.DEFAULTS = {\n    interval: 4000\n};\n\n/* harmony default export */ const classes_FadeImages = (FadeImages);\n;// ./src/js/classes/Header.js\nclass Header {\n    constructor(element, options) {\n        this.element = element;\n        this.options = __.lang.extend(true, Header.DEFAULTS, this.element.dataset, typeof options == 'object' && options);\n\n        // desktop\n        this.headerDesktop = this.element.querySelector('.header-desktop');\n        this.hamburgerDesktop = this.element.querySelector('.menu-hamburger-desktop');\n        this.desktopNavItems = this.element.querySelectorAll('.nav-item');\n        this.activeDesktopSubMenu = null;\n\n        // mobile\n        this.headerMobile = this.element.querySelector('.header-mobile');\n        this.hamburgerMobile = this.element.querySelector('.menu-hamburger-mobile');\n        this.mobileNavItems = this.element.querySelectorAll('.mobile-nav-item a');\n        this.activeMobileSubMenuLink = null;\n\n        // alert\n        this.alertElement = document.querySelector('.alert');\n        this.mainElement = document.querySelector('.main');\n        this.pageHeader = document.querySelector('.page-header');\n\n        this.initAlertListeners();\n\n        // events\n        this.initEvents();\n    }\n\n    initEvents() {\n        // desktop\n        this.hamburgerDesktop.addEventListener('click', () => this.toggleDesktopMenu());\n\n        this.desktopNavItems.forEach((item) => {\n            const trigger = item.querySelector('.nav-item-label');\n            if (trigger) {\n                __.event.on(trigger, 'click', (e) => {\n                    e.preventDefault();\n                    this.showDesktopSubmenu(e, item);\n                });\n\n                __.event.on(trigger, 'keydown', (e) => {\n                    if (e.key === 'Enter' || e.keyCode === 13) {\n                        this.showDesktopSubmenu(e, item);\n                    }\n                });\n            }\n        });\n        \n        // mobile\n        this.hamburgerMobile.addEventListener('click', () => this.toggleMobileMenu());\n\n        this.mobileNavItems.forEach((element) => {\n            __.event.on(element, 'click', () => this.toggleMobileMenu());\n        });\n\n        const mobileSubmenuItems = this.element.querySelectorAll('.mobile-nav-item.with-submenu');\n        for (let i = 0; i < mobileSubmenuItems.length; i++) {\n            __.event.on(mobileSubmenuItems[i], 'click', (e) => this.showMobileSubmenu(e));\n        }\n    }\n\n    toggleDesktopMenu() {\n        this.hamburgerDesktop.classList.toggle('menu-open');\n        this.hamburgerDesktop.classList.toggle('menu-close');\n        this.headerDesktop.classList.toggle('open');\n        \n        document.body.classList.toggle('desktop-menu-open');\n        document.documentElement.classList.toggle('desktop-menu-open');\n        \n        const span = this.hamburgerDesktop.querySelector('span');\n        if (span) {\n            span.textContent = this.hamburgerDesktop.classList.contains('menu-open') ? 'Close' : 'Menu';\n        }\n    }\n\n    showDesktopSubmenu(e, menuItem) {\n        e.stopPropagation();\n    \n        const { submenu: submenuId } = menuItem.dataset;\n        const submenu = document.getElementById(submenuId);\n        if (!submenu) return;\n    \n        if (menuItem.classList.contains('active')) return;\n    \n        this.desktopNavItems.forEach((item) => {\n            item.classList.remove('active');\n            const id = item.dataset.submenu;\n            const sub = document.getElementById(id);\n            if (sub) sub.classList.remove('open');\n        });\n    \n        const images = this.element.querySelectorAll('.desktop-submenu-img');\n        images.forEach(img => {\n            img.classList.remove('show');\n        });\n    \n        const activeImg = this.element.querySelector(`.desktop-submenu-img[data-submenu=\"${submenuId}\"]`);\n        if (activeImg) activeImg.classList.add('show');\n    \n        menuItem.classList.add('active');\n        submenu.classList.add('open');\n    \n        this.activeDesktopSubMenu = submenu;\n        this.activeDesktopNavItem = menuItem;\n    }    \n    \n    toggleMobileMenu() {\n        this.hamburgerMobile.classList.toggle('menu-open');\n        this.hamburgerMobile.classList.toggle('menu-close');\n        this.headerMobile.classList.toggle('open');\n        \n        document.body.classList.toggle('mobile-menu-open');\n        document.documentElement.classList.toggle('mobile-menu-open');\n\n        if (this.activeMobileSubMenuLink) {\n            this.activeMobileSubMenuLink.classList.remove('active');\n            this.activeMobileSubMenuLink = null;\n        }\n\n        const span = this.hamburgerMobile.querySelector('span');\n        if (span) {\n            span.textContent = this.hamburgerMobile.classList.contains('menu-open') ? 'Close' : 'Menu';\n        }\n    }\n\n    showMobileSubmenu(event) {\n        const link = event.delegateTarget;\n        const isActive = link.classList.contains('active');\n        const submenu = link.querySelector('.mobile-submenu');\n    \n        if (isActive) {\n            link.classList.remove('active');\n            link.querySelector('.nav-link').blur();\n\n            if (submenu) submenu.classList.remove('open');\n            this.activeMobileSubMenuLink = null;\n            return;\n        }\n    \n        if (this.activeMobileSubMenuLink && this.activeMobileSubMenuLink !== link) {\n            this.activeMobileSubMenuLink.classList.remove('active');\n            const previousSubmenu = this.activeMobileSubMenuLink.querySelector('.mobile-submenu');\n\n            if (previousSubmenu) previousSubmenu.classList.remove('open');\n        }\n    \n        link.classList.toggle('active');\n        if (submenu) submenu.classList.toggle('open');\n    \n        this.activeMobileSubMenuLink = link;\n    }\n\n    // alert detection and margin adjustements\n    initAlertListeners() {\n        if (!this.alertElement) return;\n\n        this.adjustMainMargin();\n\n        window.addEventListener('resize', () => {\n            this.adjustMainMargin();\n        });\n\n        this.alertElement.addEventListener('closed.bs.alert', this.onAlertClosed.bind(this));\n    }\n\n    adjustMainMargin() {\n        if (!this.alertElement || !this.mainElement) return;\n\n        const alertHeight = this.alertElement.offsetHeight;\n        this.mainElement.style.transform = `translateY(${alertHeight}px)`;\n\n        let nextElement = this.mainElement.nextElementSibling;\n\n        while (nextElement) {\n            if (nextElement.tagName == \"footer\") {\n                nextElement.style.transform = \"translateY(50px)\";\n                break;\n            } else {\n                nextElement.style.transform = \"translateY(50px)\";\n            }\n            nextElement = nextElement.nextElementSibling;\n        }\n\n            if (window.scrollY == 0) {\n                window.scrollTo(0, 0);\n            }\n        }\n\n    onAlertClosed() {\n        if (!this.mainElement) return;\n\n        const mainMarginTop = parseInt(window.getComputedStyle(this.mainElement).marginTop) || 0;\n\n        this.mainElement.style.transform = \"translateY(0)\";\n\n        let nextElement = this.mainElement.nextElementSibling;\n\n        while (nextElement) {\n            nextElement.style.transform = \"none\";\n            if (nextElement.tagName.toLowerCase() === \"footer\") {\n                break;\n            }\n            nextElement = nextElement.nextElementSibling;\n        }\n\n        if (window.scrollY == 0) {\n            window.scrollTo(0, 0);\n\n        }\n\n        if(this.pageHeader) {\n            const pageHeaderMarginTop = parseInt(window.getComputedStyle(this.pageHeader).marginTop) || 0;\n            const newHeaderMarginTop = pageHeaderMarginTop - mainMarginTop;\n            this.pageHeader.style.marginTop = newHeaderMarginTop + 'px';\n        }\n    }\n}\n\nHeader.DEFAULTS = {};\n\n/* harmony default export */ const classes_Header = (Header);\n;// ./src/js/classes/NavAnchor.js\nclass NavAnchor {\n    constructor(element, options) {\n        this.element = element;\n        this.options = __.lang.extend(true, NavAnchor.DEFAULTS, this.element.dataset, typeof options == 'object' && options);\n\n        this.navAnchorMenu = this.element.querySelectorAll('[data-nav-anchor-bar=\"menu\"] .nav-link');\n\n        this.navAnchorToggle = this.element.querySelector('.nav-anchor-toggle');\n        this.navAnchorMobileMenu = this.element.querySelector('.nav-anchor-mobile-menu');\n        this.navAnchorMobileLinks = this.element.querySelectorAll('.nav-link-mobile');\n\n\n        this.initEvents();\n    }\n\n    initEvents() {\n        for (let i = 0; i < this.navAnchorMenu.length; i++) {\n            if (this.navAnchorMenu[i]) {\n                this.navAnchorMenu[i].addEventListener('click', (e) => this.handleMenuClick(e));\n            }\n        }\n    \n        this.navAnchorToggle.addEventListener('click', () => {\n            const isOpen = !this.navAnchorMobileMenu.classList.contains('is-open');\n            this.toggleMobileMenu(isOpen);\n        });        \n    \n        this.navAnchorMobileLinks.forEach(link => {\n            link.addEventListener('click', (e) => this.handleMobileLinkClick(e));\n        });\n    }\n\n    handleMenuClick(e) {\n        e.preventDefault();\n    \n        const link = e.currentTarget;\n        const targetId = link.getAttribute('href');\n    \n        this.navAnchorMenu.forEach(nav => {\n            nav.classList.remove('active');\n            nav.removeAttribute('aria-current');\n        });\n    \n        link.classList.add('active');\n        link.setAttribute('aria-current', 'page');\n    \n        if (targetId.startsWith('#')) {\n            const target = document.querySelector(targetId);\n    \n            if (target) {\n                const offset = 80;\n                const topOffset = target.getBoundingClientRect().top + window.pageYOffset - offset;\n    \n                window.scrollTo({\n                    top: topOffset,\n                    behavior: 'smooth'\n                });\n            }\n        }\n    }    \n\n    handleMobileLinkClick(e) {\n        e.preventDefault();\n    \n        const link = e.currentTarget;\n        const targetId = link.getAttribute('href');\n    \n        if (this.navAnchorMobileMenu) {\n            this.toggleMobileMenu(false);\n        }\n    \n        if (targetId.startsWith('#')) {\n            const target = document.querySelector(targetId);\n    \n            if (target) {\n                const offset = 80;\n                setTimeout(() => {\n                    const topOffset = target.getBoundingClientRect().top + window.pageYOffset - offset;\n    \n                    window.scrollTo({\n                        top: topOffset,\n                        behavior: 'smooth'\n                    });\n                }, 300);\n            }\n        } else {\n            window.location.href = targetId;\n        }\n    }    \n    \n    toggleMobileMenu(isOpen) {\n        this.navAnchorMobileMenu.classList.toggle('is-open', isOpen);\n        this.navAnchorToggle.classList.toggle('is-open', isOpen);\n        this.navAnchorToggle.setAttribute('aria-expanded', isOpen);\n    \n        const icon = this.navAnchorToggle.querySelector('i');\n        if (icon) {\n            icon.classList.remove(isOpen ? 'icon-keyboard_arrow_down' : 'icon-keyboard_arrow_up');\n            icon.classList.add(isOpen ? 'icon-keyboard_arrow_up' : 'icon-keyboard_arrow_down');\n        }\n    }    \n}\n\nNavAnchor.DEFAULTS = {};\n\n/* harmony default export */ const classes_NavAnchor = (NavAnchor);\n;// ./src/js/classes/NavSidebar.js\nclass NavSidebar {\n    constructor(element, options) {\n        this.element = element;\n        this.options = Object.assign({}, NavSidebar.DEFAULTS, element.dataset, options);\n\n        this.toggleButton = this.element.querySelector('.nav-sidebar-toggle');\n        this.mobileMenu = this.element.querySelector('.nav-sidebar-mobile-menu');\n        this.mobileLinks = this.element.querySelectorAll('.nav-link-mobile');\n\n        this.initEvents();\n    }\n\n    initEvents() {\n        if (this.toggleButton && this.mobileMenu) {\n            this.toggleButton.addEventListener('click', () => {\n                const isOpen = !this.mobileMenu.classList.contains('is-open');\n                this.toggleMobileMenu(isOpen);\n            });\n        }\n\n        this.mobileLinks.forEach(link => {\n            link.addEventListener('click', () => this.toggleMobileMenu(false));\n        });\n    }\n\n    toggleMobileMenu(isOpen) {\n        this.mobileMenu.classList.toggle('is-open', isOpen);\n        this.toggleButton.classList.toggle('is-open', isOpen);\n        this.toggleButton.setAttribute('aria-expanded', isOpen);\n\n        const icon = this.toggleButton.querySelector('i');\n        if (icon) {\n            icon.classList.remove(isOpen ? 'icon-keyboard_arrow_down' : 'icon-keyboard_arrow_up');\n            icon.classList.add(isOpen ? 'icon-keyboard_arrow_up' : 'icon-keyboard_arrow_down');\n        }\n    }\n}\n\nNavSidebar.DEFAULTS = {};\n\n/* harmony default export */ const classes_NavSidebar = (NavSidebar);\n;// ./src/js/classes/PowerSlider.js\nclass PowerSlider {\n    constructor(element, options) {\n        this.element = element;\n        \n        let bulkOptions = JSON.parse(this.element.getAttribute('data-bulk-options') || '{}');\n        this.options = __.lang.extend(true, PowerSlider.DEFAULTS, { ...bulkOptions }, typeof options == 'object' && options);\n \n        // Core elements\n        this.carouselEl = this.element.querySelector('.carousel.slide.flexed-slider');\n        this.carouselInner = this.element.querySelector('.carousel-inner');\n        this.slides = this.element.querySelectorAll('.carousel-item');\n        this.indicatorsContainer = this.element.querySelector('.carousel-indicators');\n        this.progressContainer = this.element.querySelector('.progress');\n        this.progressThumb = this.element.querySelector('.progress-bar');\n       \n        // State and values\n        this.chunkIndex = 0;\n        this.indicatorsArr = [];\n        this.bsCarousel = null;\n        this.gapValue = parseFloat(getComputedStyle(this.carouselInner).gap);\n\n        this.init();\n    }\n\n    init() {\n        if (this.carouselEl) {\n            this.bsCarousel = new bootstrap.Carousel(this.carouselEl, {\n                interval: this.options.slideInterval,\n                wrap: true\n            });\n        }\n\n        if (this.options.dotIndicators) {\n            this.initIndicators();\n        }\n\n        this.updateLayout();\n        this.initEvents();\n    }\n\n    initIndicators() {\n        if (!this.indicatorsContainer || !this.slides.length) return;\n\n        this.slides.forEach((slide, index) => {\n            const btn = document.createElement('button');\n            btn.type = 'button';\n\n            btn.setAttribute('data-bs-target', '.carousel-instance');\n            btn.setAttribute('data-bs-slide-to', index);\n            btn.setAttribute('aria-label', 'Slide ' + (index + 1));\n\n            if (index === 0) {\n                btn.classList.add('active');\n                btn.setAttribute('aria-current', 'true');\n            }\n\n            this.indicatorsContainer.appendChild(btn);\n            this.indicatorsArr.push(btn);\n\n            btn.addEventListener('click', () => this.goToIndexByClick(index));\n        });\n    }\n\n    initEvents() {\n        window.addEventListener('resize', () => this.updateLayout());\n\n        if (this.carouselEl) {\n            this.carouselEl.addEventListener('slide.bs.carousel', (event) => this.handleSlide(event));\n            this.carouselEl.addEventListener('slid.bs.carousel', () => this.handleSlid());\n        }\n    }\n\n    getBreakpoint() {\n        const windowSize = window.innerWidth;\n        if (windowSize < 768) return 'mobile';\n        if (windowSize < 992) return 'tablet';\n        return 'desktop';\n    }\n\n    getSlidesPerView() {\n        const theBreakpoint = this.getBreakpoint();\n        return this.options.slidesperview[theBreakpoint];\n    }\n\n    isGridMode() {\n        const theBreakpoint = this.getBreakpoint();\n        return !!this.options.actAsGrid[theBreakpoint];\n    }\n\n    getItemsPerRow() {\n        const theBreakpoint = this.getBreakpoint();\n        return this.options.itemsPerRow[theBreakpoint];\n    }\n\n    updateProgressBar(currentIndex) {\n        if (!this.progressThumb || this.isGridMode()) return;\n\n        const slidesPerView = this.getSlidesPerView();\n        const total = this.slides.length;\n        let shown = slidesPerView + currentIndex;\n\n        if (shown > total) shown = total;\n\n        const progressWidth = (shown / total) * 100;\n        this.progressThumb.style.width = progressWidth + '%';\n    }\n\n    highlightIndicators(currentIndex) {\n        const slidesPerView = this.getSlidesPerView();\n        const first = currentIndex;\n        let last = currentIndex + slidesPerView - 1;\n\n        if (last >= this.slides.length) last = this.slides.length - 1;\n\n        this.indicatorsArr.forEach(btn => {\n            btn.classList.remove('active');\n            btn.removeAttribute('aria-current');\n        });\n\n        for (let i = first; i <= last; i++) {\n            if (this.indicatorsArr[i]) {\n                this.indicatorsArr[i].classList.add('active');\n                this.indicatorsArr[i].setAttribute('aria-current', 'true');\n            }\n        }\n    }\n\n    setSlidesWidth() {\n\n        let itemsShown = 0;\n        const containerWidth = this.carouselInner.parentElement.clientWidth;\n\n        if(this.isGridMode()) {\n            itemsShown = this.getItemsPerRow();\n        } else {\n            itemsShown = this.getSlidesPerView();\n        }\n\n        if (itemsShown > 1) {\n            const slideWidthPx = (containerWidth - this.gapValue * (itemsShown - 1)) / itemsShown;\n\n            this.slides.forEach(slide => {\n                slide.style.flex = `0 0 ${slideWidthPx}px`;\n            });\n        } else {\n            this.slides.forEach(slide => {\n                slide.style.flex = `0 0 ${containerWidth}px`;\n            });\n        }\n    }\n\n    goToChunk(newIndex) {\n        this.chunkIndex = newIndex;\n        this.carouselInner.style.flexWrap = 'nowrap';\n\n        const slidesPerView = this.getSlidesPerView();\n        let offsetPx = 0;\n\n        if (slidesPerView > 1) {\n            offsetPx = -(document.getElementsByClassName('carousel-item')[0].clientWidth + this.gapValue) * this.chunkIndex;\n        } else {\n            offsetPx = -(this.carouselInner.parentElement.clientWidth + this.gapValue) * this.chunkIndex;\n\n        }\n\n        this.carouselInner.style.transform = `translateX(${offsetPx}px)`;\n\n        this.slides.forEach((slide, index) => {\n            slide.classList.toggle('active', index === this.chunkIndex);\n        });\n\n        this.highlightIndicators(this.chunkIndex);\n        this.updateProgressBar(this.chunkIndex);\n    }\n\n\n    goToIndexByClick(index) {\n        if (this.isGridMode()) return;\n        \n        const slidesPerView = this.getSlidesPerView();\n        let newIndex = index - (slidesPerView - 1);\n        \n        if (newIndex < 0) newIndex = 0;\n        \n        const lastPos = this.slides.length - slidesPerView;\n        \n        if (newIndex > lastPos) newIndex = lastPos;\n        \n        this.goToChunk(newIndex);\n    }\n\n    applyGridMode() {\n        if (this.bsCarousel) this.bsCarousel.pause();\n\n        const prevBtn = this.element.querySelector('.carousel-control-prev');\n        const nextBtn = this.element.querySelector('.carousel-control-next');\n\n        if (prevBtn) prevBtn.style.display = 'none';\n        if (nextBtn) nextBtn.style.display = 'none';\n        if (this.indicatorsContainer) this.indicatorsContainer.style.display = 'none';\n        if (this.progressContainer) this.progressContainer.style.display = 'none';\n\n        this.carouselInner.style.flexWrap = 'wrap';\n        \n        this.setSlidesWidth();\n\n        this.carouselInner.style.transform = 'translateX(0)';\n    }\n\n    showSliderNavigation() {\n        const prevBtn = this.element.querySelector('.carousel-control-prev');\n        const nextBtn = this.element.querySelector('.carousel-control-next');\n\n        if (prevBtn) prevBtn.style.display = '';\n        if (nextBtn) nextBtn.style.display = '';\n        if (this.indicatorsContainer) this.indicatorsContainer.style.display = '';\n        if (this.progressContainer) this.progressContainer.style.display = '';\n\n        this.goToChunk(this.chunkIndex);\n    }\n\n    updateLayout() {\n        if (this.isGridMode()) {\n            this.applyGridMode();\n        } else {\n            this.setSlidesWidth();\n            this.showSliderNavigation();\n        }\n    }\n\n    handleSlide(event) {\n        if (this.isGridMode()) {\n            event.preventDefault();\n            return;\n        }\n\n        const slidesPerView = this.getSlidesPerView();\n        const lastPos = this.slides.length - slidesPerView;\n\n        if (event.direction === 'left') {\n            this.chunkIndex++;\n            if (this.chunkIndex > lastPos) this.chunkIndex = 0;\n        } else {\n            this.chunkIndex--;\n            if (this.chunkIndex < 0) this.chunkIndex = lastPos;\n        }\n        \n        this.goToChunk(this.chunkIndex);\n        event.to = this.chunkIndex;\n    }\n\n    handleSlid() {\n        if (!this.isGridMode()) {\n            this.slides.forEach((slide, index) => {\n                slide.classList.toggle('active', index === this.chunkIndex);\n            });\n            this.highlightIndicators(this.chunkIndex);\n        }\n    }\n}\n\nPowerSlider.DEFAULTS = {\n    arrowNavigation: false,\n    isBleeding: false,\n    autoplay: false,\n    playInterval: 5000,\n    slidesperview: {\n        desktop: 1,\n        tablet: 1,\n        mobile: 1\n    },\n    actAsGrid: {\n        desktop: false,\n        tablet: false,\n        mobile: false,\n    },\n    itemsPerRow: {\n        desktop: 1,\n        tablet: 1,\n        mobile: 1\n    },\n    dotIndicators: false,\n    progressBar: false\n};\n\n/* harmony default export */ const classes_PowerSlider = (PowerSlider);\n;// ./src/js/classes/ScrollingText.js\nclass ScrollingText {\n    constructor(element, options) {\n        this.element = element;\n        this.options = Object.assign({}, ScrollingText.DEFAULTS, this.element.dataset, options);\n\n        // elements\n        this.texts = this.element.querySelectorAll('.text');\n        this.lineHeight = 1; // in em\n        this.currentSlide = 0;\n        this.totalSlides = this.texts.length;\n\n        this.init();\n    }\n\n    init() {\n        this.animateSlider();\n\n        this.interval = setInterval(() => {\n            this.animateSlider();\n        }, this.options.interval);\n    }\n\n    animateSlider() {\n        this.element.style.transform = `translateY(-${this.currentSlide * this.lineHeight}em)`;\n\n        this.currentSlide = (this.currentSlide + 1) % this.totalSlides;\n    }\n}\n\nScrollingText.DEFAULTS = {\n    interval: 4000\n};\n\n/* harmony default export */ const classes_ScrollingText = (ScrollingText);\n// EXTERNAL MODULE: ./node_modules/@tannerhodges/match-height/docs/match-height.js\nvar match_height = __webpack_require__(\"./node_modules/@tannerhodges/match-height/docs/match-height.js\");\nvar match_height_default = /*#__PURE__*/__webpack_require__.n(match_height);\n;// ./src/js/main.js\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Hofstra/./src/js/main.js_+_6_modules?")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/js/main.js");Hofstra=__webpack_exports__})();